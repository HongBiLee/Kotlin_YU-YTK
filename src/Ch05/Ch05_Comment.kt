package Ch05

/*
 * 2024.07.03 - ch05 코드 자료
 *
 * 상속
 * => 소프트웨어 재활용
 * ==> 패키지 단위 관리 가능
 * ==> 라이브러리 단위
 * => 다형성 ; 동일한 이름을 가지는 하나의 함수가 적용되는 객체에 따라 다른 의미나 기능을 가질 수 있다.
 * ==> Polymorphism ; 동질이상
 * ==> 가상 함수 사용 => 다형성 구현
 * => 확장성
 *
 * 상속 ; 자식 클래스는 부모 클래스의 모든 속성을 포함한다.
 * 다중 상속 ; interface 사용
 *
 * open ; main() 같은 외부에서 접근 가능
 *
 * overloading ; 동일한 함수 이름 사용해도 전달되는 매개 변수가 다르면 (순서, 자료형 등) 서로 다른 함수로 구분하여 사용
 * overriding ; 자식 클래스에서 부모 클래스의 함수를 재정의하는 것 - 전달되는 매개 변수가 동일함
 *
 * Upcasting ; 자식 -> 부모 // 자식은 부모의 모든 걸 상속 받아 있음 => 존재 x 속성 x but slicing 문제 있음 => 자식에게만 있는 속성은 날아감
 * Downcasting ; 부모 -> 자식 // 부모는 자식에게 있는 게 없을 수 있음 => 존재 x 속성 o => 문제 발생
 *
 * 다형성
 * => 하나의 체계로 관리하면 여러모로 수월함 ; 부모 클래스로 자식 클래스 객체 관리 가능
 *
 * 추상 함수 (Abstract Method) ; 함수 원형 선언 but 구현 x
 * 추상 클래스 (Abstract Class) ; 추상 함수가 포함 o or 추상 함수 x 클래스에 abstract 선언
 * => 추상 클래스는 객체를 생성할 수 없다.
 * => 추상 클래스는 상속될 수 있다.
 *
 * 인터페이스 (Interface) ; 객체 생성 x, 다중 상속 o
 *
 * Comparable interface ; 순서 정리, 정렬 => 사용
 * => 기준 객체와 인수로 전달된 객체 비교
 * ==> 기준 객체 > 인수 ; +
 * ==> 기준 객체 < 인수 ; -
 * ==> 기준 객체 == 인수 ; 0
 *
 *
 * 객체 지향형 프로그래밍에 대해서 제대로 이해해야 한다.
 *
 *
 *
 */